# Calculer la note moyenne par bootcamp :
SELECT bootcamp, AVG(rating) AS moyenne
FROM feedbacks
GROUP BY bootcamp;


# Trouver le commentaire le plus long pour chaque type de feedback :
SELECT feedback_type, MAX(LENGTH(comment)) AS longueur_max_commentaire
FROM feedbacks
GROUP BY feedback_type;


# Compter le nombre de feedbacks par bootcamp et par mois :
SELECT bootcamp, MONTH(date) AS mois, COUNT(*) AS nombre_feedbacks
FROM feedbacks
GROUP BY bootcamp, MONTH(date);


# Trouver les bootcamps ayant une note moyenne inférieure à 5 :
SELECT bootcamp, AVG(rating) AS moyenne
FROM feedbacks
GROUP BY bootcamp
HAVING AVG(rating) < 5;

# Récupérer les feedbacks ayant les 5 notes les plus élevées :
SELECT *
FROM feedbacks
ORDER BY rating DESC
LIMIT 5;


# Trouver le feedback le plus récent pour chaque combinaison de bootcamp et de type de feedback :
SELECT f.bootcamp, f.feedback_type, f.date, f.note, f.comment
FROM feedbacks f
JOIN (
  SELECT bootcamp, feedback_type, MAX(date) AS max_date
  FROM feedbacks
  GROUP BY bootcamp, feedback_type
) m 
ON f.bootcamp = m.bootcamp AND f.feedback_type = m.feedback_type AND f.date = m.max_date;


# Calculer la répartition des notes par type de feedback :
SELECT feedback_type, 
       COUNT(CASE WHEN note = 1 THEN 1 END) AS note_1,
       COUNT(CASE WHEN note = 2 THEN 1 END) AS note_2,
       COUNT(CASE WHEN note = 3 THEN 1 END) AS note_3,
       COUNT(CASE WHEN note = 4 THEN 1 END) AS note_4,
       COUNT(CASE WHEN note = 5 THEN 1 END) AS note_5,
       COUNT(CASE WHEN note = 6 THEN 1 END) AS note_6,
       COUNT(CASE WHEN note = 7 THEN 1 END) AS note_7
FROM feedbacks
GROUP BY feedback_type;






##########################################################################################################################


                             ### METHODE 2 : UTILISATION DE SUBPROCESS, POPEN et PIPE ###

from subprocess import Popen, PIPE


bp = Blueprint('routes', __name__)

# '/' : Route pour la page d'accueil qui affiche le formulaire de retour et 
#       gère la soumission des nouveaux retours.
@bp.route('/', methods=['GET', 'POST'])
def home():
    if request.method == 'POST':
        bootcamp = request.form['formation']
        feedback_type = request.form['typeRetour']
        date = request.form['date']
        rating = int(request.form['rating'])
        comment = request.form['comments']
        consent = 'consentement' in request.form
        
        if consent:
            feedback = Feedback(bootcamp, feedback_type, date, rating, comment)

            try:
                # Enregistrer le retour dans un fichier CSV temporaire
                with open('temp_feedback.csv', 'w', newline='') as csvfile:
                    writer = csv.writer(csvfile)
                    writer.writerow([1, bootcamp, feedback_type, date, rating, comment])

                # Charger le fichier CSV dans HDFS 
                put = Popen(["hadoop", "fs", "-put", "temp_feedback.csv", "/feedbacks"], stdin=PIPE, bufsize=-1, shell= True)
                put.communicate()
                

                # créer un message Flash 
                flash("Merci pour votre contribution ! votre retour a été enregistré.", "success")  
                return redirect(url_for('routes.home'))           
                
            except Exception as e:
                print(f"Erreur lors de l'enregistrement du feedback : {str(e)}")
                flash("Une erreur est survenue. Veuillez réessayer plus tard.", "danger")   
                return redirect(url_for('routes.home'))

        else:
            flash("Veuillez donner votre consentement pour enregistrer votre retour.", "warning")
            return redirect(url_for('routes.home'))
    
    return render_template('index.html')

    #################################################################################################

    # Chargement des données dans la table Hive:
    Dans CLI Hive : 
    LOAD DATA INPATH 'feedbacks/temp_feedback.csv' INTO TABLE feedbacks;


# Créer un table HIVE:
CREATE EXTERNAL TABLE feedbacks (
  id INT,
  bootcamp STRING,
  feedback_type STRING,
  `date` STRING,
  rating INT,
  comment STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n' 
STORED AS TEXTFILE
LOCATION '/user/hdfs/';




###########################################